import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
public class Main {

public static void main(String[] args) { Class cls = Test.class;

System.out.println("The name of the class is " + cls.getName());

Constructor constructor;
try { constructor = cls.getConstructor();
System.out.println("The name of the constructor is " + constructor.getName());

} 
catch (NoSuchMethodException e)
{
	e.printStackTrace(); 
} 
catch (SecurityException e)
{ 
	e.printStackTrace();
	
}

Method[] methods = cls.getMethods();
for (Method m : methods)
{
	System.out.println("Method name: " + m.getName()); 
	}

System.out.println("Printing the result of method 1: ");
try {
	Method methodCall1 = cls.getDeclaredMethod("method1");
methodCall1.invoke(cls);
Method methodCall2 = cls.getDeclaredMethod("method2", int.class);
methodCall2.invoke(cls, 15);
Field field = cls.getDeclaredField("s");
System.out.println(field.get(cls));
field.setAccessible(true);
System.out.println(field.get(cls));

System.out.println("Print the value of s");
field.set(cls, "JAVA");
methodCall1.invoke(cls);

}
catch (Exception e)
{
	e.printStackTrace(); 
	
}

}

}
